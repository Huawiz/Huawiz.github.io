<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年與23歲的人生</title>
      <link href="/Diary/2022-review/"/>
      <url>/Diary/2022-review/</url>
      
        <content type="html"><![CDATA[<p>已經很久沒寫部落格了，來回顧一下今年吧。</p><span id="more"></span><p>會想寫這篇，是因為最近利用下班時間上英語會話課，而這次上課的主題剛好是新年新希望，這正好又提醒了我：新的一年來囉，你準備好了嗎? 想當然爾，翻翻前面自己寫的文章，就好像全世界對不起我，我也對不起世界一樣，看一看只能會心一笑想著:幹，不久前的我怎麼這麼可愛。</p><p>從今年中確定免役後，開始搬出家裡打理自己，並且進入公司開始真正的新人生活後，之前那些焦慮便一哄而散，不知道是因為社畜生活讓我沒時間產生焦慮了呢?還是是因為我真的瞬間變得不那麼媽寶了呢?</p><hr><h1 id="23歲的這一年"><a href="#23歲的這一年" class="headerlink" title="23歲的這一年"></a>23歲的這一年</h1><p>除了發一些FB幹文外，我其實也做了蠻多事情的，不過當下其實沒有紀錄完整，實在有點可惜。不過就一起記在這篇文章吧！</p><h2 id="從淡江退學"><a href="#從淡江退學" class="headerlink" title="從淡江退學"></a>從淡江退學</h2><p><img src="https://i.imgur.com/XEQsDpk.jpg"></p><p>年初的時候，我自己和淡江數學系辦退學了。經過兩年的反反覆覆、焦慮與跑外送等紅燈的時間，我很草率的決定：阿退一退啦！所以就這樣辦了退學，還被工讀生問了幾次：你轉走了嗎？</p><p>沒。我也不知道我未來要幹嘛。</p><hr><h2 id="第一次自行車環島"><a href="#第一次自行車環島" class="headerlink" title="第一次自行車環島"></a>第一次自行車環島</h2><p><img src="https://i.imgur.com/Ga3yuhE.png"></p><p>在2022年的4月，我和實習的公司請假了5天+前後的六日+連假一天，共10天，和大學的單車社一起去了一趟環島之旅。我還記得第一天，那天颳風下雨外，還在西濱上爆胎兩次，其中一次還是在下坡的白線上爆胎，那時後面還有一台砂石車要過XDD  沒死真的運氣太好了!</p><hr><h2 id="激鬥峽谷宗師"><a href="#激鬥峽谷宗師" class="headerlink" title="激鬥峽谷宗師"></a>激鬥峽谷宗師</h2><p><img src="https://i.imgur.com/lSZoiC6.jpg" alt="file"></p><p>其實之前有發過文章，但是還是提一下好了。我想打電動這事情畢竟也算是生活的一部分，若我帶有「它是電動，不值得寫」這樣的想法，那我究竟還有什麼東西值得和人家講呢?畢竟這占據我下班時間很大一部分。連周杰倫都願意在ig分享自己上大師了，我秀一下宗師也可以的吧?雖然現在這遊戲在台灣沒啥人玩，宗師也不是特別厲害的牌位。</p><hr><h2 id="毛遂自薦，幫公司上一場教育訓練"><a href="#毛遂自薦，幫公司上一場教育訓練" class="headerlink" title="毛遂自薦，幫公司上一場教育訓練"></a>毛遂自薦，幫公司上一場教育訓練</h2><div class="videobox"><iframe src="https://onedrive.live.com/embed?resid=FCAE307015DB996D%2119445&amp;authkey=!AGR3peucSI8QXGg&amp;em=2&amp;wdAr=1.7777777777777777"  frameborder="0">這是 <a target="_blank" href="https://office.com/webapps">Office</a> 提供的內嵌 <a target="_blank" href="https://office.com">Microsoft Office</a> 簡報。</iframe></div><p>在初入公司前幾個月，因為無聊有自學一下Powershell。雖然公司是做資料庫的，但是我對Powershell的興趣其實比資料庫還強，或許是因為我很懶吧。某天吃飯的時候，聽到老闆講到想讓新人都學怎麼使用Powershell，我便毛遂自薦的說：交給我吧！於是就有了這篇<a href="https://hey-series.com/Powershell/from-get-help-to-use-powershell/">筆記文</a>，其實我還有做簡報。</p><p>公司有同事和我說：「我學到很多。」我原本以為我教的都只是一些簡單到微不足道，不值得一提的東西，但是準備了一個多月聽到了這句話，不免的還是在內心自豪了起來。</p><hr><h2 id="第一次離家出走、打理自己"><a href="#第一次離家出走、打理自己" class="headerlink" title="第一次離家出走、打理自己"></a>第一次離家出走、打理自己</h2><p><img src="https://i.imgur.com/EBGYf23.png"></p><p>在9月多的時候，在確定自己胖到免疫了之後，便搬出家裡住到親戚的舊家。很幸運能用比較低的價格住來大安這裡，從剛來的第一個月連桌椅都買不起，到年底的現在，陸陸續續開始用薪水買了一些東西，雖然也因為這樣沒存什麼錢。</p><hr><h2 id="參與社群"><a href="#參與社群" class="headerlink" title="參與社群"></a>參與社群</h2><p><img src="https://i.imgur.com/pARfg5T.png"></p><p>某天上班的時候，老闆就說「SQLPASS缺幹部，你要不要參加？你有大學社團經驗。」</p><p>雖然那些社團經驗對我來說沒啥好回味的，甚至可以說是我憂鬱的來源，但是面對這個問題我也是沒啥考慮就答應了。所以就接下了2023年這屆的SQLPASS幹部，來經營這個臉書社群，並且協助舉辦了一場活動。</p><hr><h1 id="2023-Resolution"><a href="#2023-Resolution" class="headerlink" title="2023 Resolution"></a>2023 Resolution</h1><p>下面是我準備會話課時寫的筆記，文法錯就…先看得懂就好啦😂</p><ol><li>Try to play bass</li></ol><blockquote><p>🎸 Because I watched an anime and I really want to try this. After I did my work and went home,I often felt bored. Maybe playing a musical instrument can make me happier than playing a mobile game. Playing Mobile game become more and more bored for me. Giving playing bass or guitar a try maybe can let me leave this boring cycle. And meet more good guys.</p></blockquote><ol start="2"><li>Go 360 bike challenge</li></ol><blockquote><p>🚲 Last Year,I finished cycling around Taiwan with College Club. And I have a good memory in this time. I thought maybe I can do more advance one like this - Go 360 bike challenge. This is a challenge about finshing 360 kilometers in one days.</p></blockquote><ol start="3"><li>Don’t Buy Book anymore. Try to make My book or Courses Completed</li></ol><blockquote><p>📚 I have a bad habit. When I felt anxiety about futrue. I would buy books and courses from Internet. It has made me poor. So although I begun to work months and didn’t save money. But I have no time to learn these. To be honest,I did’t study hard enough. I prefered to play mobile game when I had time. So this year, I make this hope. I want to finsh them and avoid to buy more book and course. I need to learn more about that for a better career.</p></blockquote><ol start="4"><li>Write 5 blog posts at least.</li></ol><blockquote><p>✉️ I have a blog and it is in dusty. In the past, I thought logging life is a good habit for improving myself. But it’s abandoned by busy life. So this year I hope I can do that again. I set a low goal to make sure I can do it.</p></blockquote><hr><p>以上，先祝看到這篇文章的路人們新年快樂！</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Diary </tag>
            
            <tag> 年度回顧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Powershell入門筆記</title>
      <link href="/Powershell/from-get-help-to-use-powershell/"/>
      <url>/Powershell/from-get-help-to-use-powershell/</url>
      
        <content type="html"><![CDATA[<p>這篇文章想分享下，最近準備挑戰向新人介紹的Powershell基礎使用，也順便透過整理資料來加深自己這方面的基礎，裡面也有給一些練習題，如果你剛好路過也可以做做看。</p><span id="more"></span><p>注：原始文件寫在OneNote上，在轉換成Markdown的過程已盡量修改成部落格版本的寫法。</p><br><!-- toc --><br><h1 id="簡單介紹"><a href="#簡單介紹" class="headerlink" title="簡單介紹"></a>簡單介紹</h1><p>Powershell是微軟推出的CLI，擁有以下特性:</p><ol><li>一致性的指令命名規則</li></ol><blockquote><p>所有”官方”指令都遵守 <code>​Verb-Noun</code>​ ，例如<code> ​get-help​ </code></p></blockquote><ol start="2"><li>內建強大的Cmdlet(command-let)</li><li>具有Scripts的功能</li></ol><blockquote><p>可以透過編寫Code，把指令像是樂高一樣組成我們想要的樣子。</p></blockquote><p>每個指令都是以動詞+名詞(通常是單數)的方式組成，而使用每個指令時，以<code>-parameters</code>表示參數。</p><p>例如: <code>get-command -verb write -none host</code></p><p>get-command 指令</p><p>-verb,-none 參數</p><p>write 是 -verb的參數內容；host是-none的參數內容</p><hr><h1 id="常用快捷鍵"><a href="#常用快捷鍵" class="headerlink" title="常用快捷鍵"></a>常用快捷鍵</h1><table><thead><tr><th>快捷鍵</th><th>Memo</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>最常用的快捷鍵，可以自動完成指令、參數名稱。</td></tr><tr><td><code>Ctrl+C</code></td><td>停止目前指令</td></tr><tr><td><code>Ctrl+L</code></td><td>清除畫面</td></tr><tr><td><code>(Ctrl+Shift+)Pageup</code></td><td>切到上一面</td></tr><tr><td><code>(Ctrl+Shift+)Pagedown</code></td><td>切到下一面</td></tr></tbody></table><hr><h1 id="get-help-by-yourself-救你自己！"><a href="#get-help-by-yourself-救你自己！" class="headerlink" title="get-help by yourself(救你自己！)"></a>get-help by yourself(救你自己！)</h1><p>一般我們在編寫Powershell指令時，由於Powershell的功能實在太強大，有太多的指令我們無法全部記住，所以我們必須學會使用內建的手冊，來查找我們要使用的指令。</p><table><thead><tr><th>指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td><code>update-help​</code></td><td>更新Powershell的說明文件</td><td></td></tr><tr><td><code>get-help &lt;功能&gt;</code></td><td>用來查看說明文件</td><td>取得<code>hyper-v</code>有關的指令或說明檔<br><code>​get-help *hyper-v*</code></td></tr><tr><td><code>get-command &lt;功能&gt;</code></td><td>用來查找相關指令</td><td>查找和Hyper-V有關的指令<br>​​<code>get-command -Module hyper-v</code></td></tr><tr><td><code>get-member &lt;物件&gt;</code></td><td>查詢或指令相關的Properties</td><td>看<code>$x</code>物件的屬性<br>​<code>get-member -InputObject $x</code><br>or<br><code>$x|get-member</code></td></tr></tbody></table><p><strong>注意</strong></p><p><code>get-help</code> <code>*hyper-v*</code> 直接執行可能會顯示不出結果，但是寫在<code>get-command -Module hyper-v</code>之後卻可以，所以或許兩個指令有對應關係，在查找指令時最好先用<code>get-command</code>找到未知的指令後，再使用<code>get-help</code>來查使用方式。</p><hr><h1 id="常用CLI指令"><a href="#常用CLI指令" class="headerlink" title="常用CLI指令"></a>常用CLI指令</h1><p>因為不確定是否每個人都有使用CLI的經驗，所以特別列一些時常用來檔案管理的幾個指令（最常用的）。</p><table><thead><tr><th>指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td><code>cd</code></td><td>到指定目錄</td><td><code>cd C:\\</code></td></tr><tr><td><code>mkdir</code></td><td>建立資料夾</td><td><code>mkdir newfolder</code></td></tr><tr><td><code>rm</code></td><td>刪除檔案</td><td><code>rm test.txt</code></td></tr><tr><td><code>cls</code></td><td>清空畫面</td><td></td></tr><tr><td><code>pwd</code></td><td>查看現在目錄</td><td></td></tr><tr><td><code>echo</code></td><td>寫資料</td><td><code>echo &quot;Hello&quot; &gt; World.txt</code></td></tr><tr><td><code>Notepad</code></td><td>打開記事本</td><td><code>Notepad &lt;路徑&gt;</code></td></tr><tr><td><code>code</code></td><td>有裝VSCODE的話，可以直接用這個指令打開文件編輯程式碼</td><td><code>code &lt;路徑&gt;</code></td></tr></tbody></table><p>其他縮寫可以透過<code>get-alias | select name,definition</code>來查看縮寫與原始指令。</p><hr><h1 id="特殊符號"><a href="#特殊符號" class="headerlink" title="特殊符號"></a>特殊符號</h1><p>特殊符號： <a href="https://docs.microsoft.com/zh-tw/powershell/exchange/exchange-cmdlet-syntax">Exchange Cmdlet 語法 | Microsoft</a></p><table><thead><tr><th><strong>符號</strong></th><th><strong>說明</strong></th><th><strong>範例</strong></th></tr></thead><tbody><tr><td><code>$</code></td><td>代表參數</td><td><code>$h = get-help</code></td></tr><tr><td><code>|</code></td><td>Pipeline，串接指令用的水管符號</td><td><code>get-alias|select name</code></td></tr><tr><td><code>&gt;</code></td><td>把指令產生結果輸出成某檔案<br>(會覆寫)</td><td><code>get-process &gt; Process.txt</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>把指令產生結果輸出成某檔案<br>(檔案存在的話會在後面加入)</td><td><code>get-process &gt;&gt; Process.txt</code></td></tr><tr><td><code>*</code></td><td>1.比對字串<br>2.乘法運算<br>3.重複字串</td><td>1.<code>get-help *keyword*</code><br>2.<code>$a * $b</code><br>3.”test”*3 –&gt; testtesttest</td></tr><tr><td><code>[]</code></td><td>拿來指定索引(index)、資料型態</td><td>指定索引:<code>$array[3]</code><br>指定資料型態:<code>$b = [string]$a</code> <br><img src="https://i.imgur.com/gE5R4FC.png" alt="file"></td></tr><tr><td><code>&#123;&#125;</code></td><td>用來包指令間的運算式的符號</td><td>見<code>@</code>的範例</td></tr><tr><td><code>..</code></td><td>表示之間，例如$array[2..5]，會回傳array中第二個到第五個間的值</td><td>見<code>@</code>的範例</td></tr><tr><td><code>$_</code></td><td>表示”每一個”物件，只有在執行指令的範圍有效，例如：<br><code>$x[0..5].foreach(&#123;$_*$_&#125;)</code><br>表示0~5每個數字的平方數</td><td>見<code>@</code>的範例</td></tr><tr><td><code>@</code></td><td>作為關聯陣列的符號</td><td><img src="https://i.imgur.com/gmEIatG.png" alt="Image"></td></tr><tr><td><code>%</code></td><td>1.在運算式裡面作為”取餘數”的符號<br>2.在<code>|</code>後面作為foreach的速記符號</td><td><img src="https://i.imgur.com/U9YC4p4.png" alt="Image"></td></tr><tr><td><code>?</code></td><td>where的速記符號</td><td><img src="https://i.imgur.com/KrG3r6O.png" alt="Image"></td></tr></tbody></table><hr><h1 id="比較參數"><a href="#比較參數" class="headerlink" title="比較參數"></a>比較參數</h1><p>另外在Powershell的運算式(在{}裡面，見上面範例)中，是使用預留的參數作為比較用途，而非使用符號<code>=</code>,<code>&gt;</code>,<code>&lt;</code>，原因在於Powershell除了可以比較數值大小，也可以比較字串，為了應付不同的比較方式，採用更多種預留參數作為比較運算子。<a href="https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.2">about_Comparison_Operators</a></p><p><img src="https://i.imgur.com/eqHp7NZ.png" alt="Image"></p><p>查看差異:</p><p><img src="https://i.imgur.com/DEGrggs.png" alt="file"></p><p>由此可知，<code>=</code>用來定義參數，而<code>-eq</code>用來判斷,回傳<code>$true</code> or <code>$false</code></p><hr><h1 id="自動變數"><a href="#自動變數" class="headerlink" title="自動變數"></a>自動變數</h1><p><a href="https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.2">關於自動變數 - PowerShell | Microsoft Docs</a></p><table><thead><tr><th>參數</th><th>Memo</th></tr></thead><tbody><tr><td><code>$Profile</code></td><td>一個預設拿來存Powershell設定檔的內建參數，可以在此設定每次打開Powershell要載入的函數、模組。<br><strong>也可以在這定義平常會用到的參數作為自動變數</strong></td></tr><tr><td><code>$Error</code></td><td>顯示近期發生的錯誤訊息。</td></tr></tbody></table><hr><h1 id="資料處理"><a href="#資料處理" class="headerlink" title="資料處理"></a>資料處理</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p><a href="https://docs.microsoft.com/zh-tw/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.2">您想知道有關於陣列的一切 - PowerShell | Microsoft Docs</a></p><p>算矩陣(供參考)</p><p>對​​​​​$\begin{bmatrix}1&amp;2&amp;3 \\ 4&amp;5&amp;6 \\ 7&amp;8&amp;9\end{bmatrix}$​​​​​做運算</p><p>(橫的為Row列，直的為Col欄，索引從0開始)</p><table><thead><tr><th>Operate</th><th>Example</th></tr></thead><tbody><tr><td>Matrix</td><td><code>$matrix = @(@(1,2,3),@(4,5,6),@(7,8,9))</code></td></tr><tr><td>row</td><td><code>$row = $matrix[0]</code></td></tr><tr><td>col</td><td><code>$col = $matrix | %&#123;$_[0]&#125;</code></td></tr></tbody></table><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><table><thead><tr><th>Action</th><th>Memo</th></tr></thead><tbody><tr><td>列加法</td><td>第0列+第1列<br>  <code>for($i=0;$i -le $matrix.Length;$i++)&#123;$matrix[0][$i]+$matrix[1][$i]&#125;</code></td></tr></tbody></table><p><img src="https://i.imgur.com/xVyb9GL.png" alt="file"></p><table><thead><tr><th>Action</th><th>Memo</th></tr></thead><tbody><tr><td>欄加法</td><td>第0行+第1行<br>  <code>$matrix | %&#123;$_[0]+$_[1]&#125;</code></td></tr></tbody></table><p><img src="https://i.imgur.com/9kDHUJe.png" alt="file"></p><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><table><thead><tr><th>Action</th><th>Memo</th></tr></thead><tbody><tr><td>欄乘列</td><td>欄乘列<br>$\begin{bmatrix} 1 \\ 4 \\ 7 \end{bmatrix}$ * $\begin{bmatrix}1&amp;2&amp;3\end{bmatrix}&#x3D;\begin{bmatrix}1∗1&amp;1∗2&amp;1∗3 \\ 4∗1&amp;4∗2&amp;4∗3 \\ 7∗1&amp;7∗2&amp;7∗3\end{bmatrix}&#x3D;\begin{bmatrix}1&amp;2&amp;3 \\ 4&amp;8&amp;12 \\ 7&amp;14&amp;21\end{bmatrix}$<br><br><code>for($j=0;$j-lt$col.length;$j++)&#123;$elements[$j]=for($i=0;$i -lt $row.length;$i++)&#123;$col[$j]*$row[$i]&#125;&#125;</code><br></td></tr></tbody></table><p><img src="https://i.imgur.com/I0fcrQk.png" alt="file"></p><table><thead><tr><th>Action</th><th>Memo</th></tr></thead><tbody><tr><td>列乘欄</td><td>列乘欄<br> $\begin{bmatrix}1&amp;2&amp;3\end{bmatrix}$*$\begin{bmatrix} 1 \\ 4 \\ 7 \end{bmatrix}$ = 1*1+2*4+3*7&#x3D;30  <br>  <code>$elements = for($i=0;$i-lt$row.Length;$i++)&#123;$row[$i] * $col[$i]&#125;</code> <br> <code>$sum = ($elements | Measure-Object -sum).sum</code></td></tr></tbody></table><p><img src="https://i.imgur.com/btbjhNB.png" alt="file"></p><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p><a href="https://docs.microsoft.com/zh-tw/powershell/scripting/learn/deep-dives/everything-about-hashtable?view=powershell-7.2">您想知道有關雜湊表的一切 - PowerShell | Microsoft Docs</a></p><p>可以用來對群組資料做分類，例如今天有個表格資料</p><table><thead><tr><th>Group</th><th>Domain</th><th>IP</th></tr></thead><tbody><tr><td>AD</td><td>ad.company.ad</td><td>192.168.0.3</td></tr><tr><td>Server1</td><td>server1.company.ad</td><td>192.168.0.4</td></tr><tr><td>Server2</td><td>server2.company.ad</td><td>192.168.0.5</td></tr></tbody></table><p>可以使用hashtable來存資料</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$group</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">ADDC = <span class="selector-tag">@</span>&#123;Domain = <span class="string">&quot;addc.company.ad&quot;</span>;IP=<span class="string">&quot;192.168.0.3&quot;</span>&#125;</span><br><span class="line">Server1 = <span class="selector-tag">@</span>&#123;Domain = <span class="string">&quot;server1.company.ad&quot;</span>;IP=<span class="string">&quot;192.168.0.4&quot;</span>&#125;</span><br><span class="line">Server2 = <span class="selector-tag">@</span>&#123;Domain = <span class="string">&quot;server2.company.ad&quot;</span>;IP=<span class="string">&quot;192.168.0.5&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一來，就能使用Properties來查這個表格內的相關資料<br><img src="https://i.imgur.com/UsaOXp9.png" alt="file"></p><hr><h1 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h1><h2 id="查找題"><a href="#查找題" class="headerlink" title="查找題"></a>查找題</h2><ol><li>執行<code>update-help</code></li><li>使用<code>get-help get-content </code>來學習如何使用此指令<br>  a. 使用<code>get-help get-content -example</code> 來查看範例<br>  b. 使用<code>get-help get-content -onlinn</code> 連去微軟網站看此指令的說明</li></ol><h2 id="基本檔案操作-計算-輸出結果題"><a href="#基本檔案操作-計算-輸出結果題" class="headerlink" title="基本檔案操作+計算+輸出結果題"></a>基本檔案操作+計算+輸出結果題</h2><ol><li>在C槽建立一個名為 ​pwsh​ 的資料夾，並且到此目錄底下</li><li>建立一個名為 ​ ​ ​<code>Cube.txt</code>​ ​ ​ 的文字檔案</li><li>對0~20取立方，輸出結果至<code>Cube.txt</code></li><li>使用指令在CLI介面查看 ​ ​<code>Cube.txt​</code> ​ 的內容</li></ol><p>如圖</p><p><img src="https://i.imgur.com/CmMTmeJ.png" alt="Image"></p><hr><h2 id="衍生題"><a href="#衍生題" class="headerlink" title="衍生題"></a>衍生題</h2><ol><li>請對上面<code>Cube.txt</code>的檔案裡的每個數字，標示出是奇數(odd)或偶數(even)</li></ol><p>如圖</p><p><img src="https://i.imgur.com/Gf2aXrE.png" alt="file"></p><p>hint: <code>$x.tostring</code></p><ol start="2"><li>把上面那題改用雜湊表(hashtable)表示</li></ol><p><img src="https://i.imgur.com/5ZLXvqJ.png" alt="file"></p><hr><h2 id="情境題"><a href="#情境題" class="headerlink" title="情境題"></a>情境題</h2><p>(請自行創空白的txt練習)</p><blockquote><p>今天有個檔案夾內的檔案，裡面的檔案名稱因為不明原因全部都有相同的錯誤，請用Powershell來快速修正檔案名稱。</p></blockquote><p>範例: Error_NAME_file01.txt –&gt; Correct_Name_file01.txt</p><p>hint: Rename-Item,get-childItem</p><hr><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>get-help<br><a href="https://docs.microsoft.com/zh-tw/powershell/scripting/learn/ps101/02-help-system?view=powershell-7.2">說明系統 - PowerShell | Microsoft Docs</a></p><p>特殊符號<br><a href="https://docs.microsoft.com/zh-tw/powershell/exchange/exchange-cmdlet-syntax">Exchange Cmdlet 語法 | Microsoft</a></p><p>比較參數</p><p><a href="https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_comparison_operators?view=powershell-7.2">about_Comparison_Operators</a></p><p>資料結構<br><a href="https://docs.microsoft.com/zh-tw/powershell/scripting/learn/deep-dives/everything-about-arrays?view=powershell-7.2">您想知道有關於陣列的一切 - PowerShell | Microsoft Docs</a><br><a href="https://docs.microsoft.com/zh-tw/powershell/scripting/learn/deep-dives/everything-about-hashtable?view=powershell-7.2">您想知道有關雜湊表的一切 - PowerShell | Microsoft Docs</a></p><p>快捷鍵</p><p><a href="https://ithelp.ithome.com.tw/articles/10027481">Windows PowerShell 基本操作 - 熱鍵 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 (ithome.com.tw)</a>|</p>]]></content>
      
      
      <categories>
          
          <category> Powershell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Powershell快速建立Hyper-V的差異硬碟</title>
      <link href="/Powershell/build-vhdx-diff-quick-pwsh/"/>
      <url>/Powershell/build-vhdx-diff-quick-pwsh/</url>
      
        <content type="html"><![CDATA[<p>最近工作上，常使用Hyper-V來練習架設環境，而每次想要再次練習就還要再按一次圖形化介面，一台按一次，n台就要按n次，麻煩！所以才會誕生這篇，研究了一下如何用簡單的powershell，來自動化「創建n次差異硬碟，並且掛載到虛擬機器上」這個動作。</p><span id="more"></span><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#build-VHD -Path &amp;#039;E:labtest&amp;#039; -Parent &amp;#039;E:VMWinServer2019base.vhdx&amp;#039; -List &quot;AD&quot;,&quot;Server1&quot;,&quot;Server2&quot;,&quot;Server3&quot;</span></span><br><span class="line"><span class="comment">#使用方式:build-VHD -Path &lt;你要建立的位置&gt; -Parent &lt;父系磁碟位置&gt; -List &lt;主機列表&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build-VHD</span></span> &#123;</span><br><span class="line">  <span class="keyword">Param</span> (</span><br><span class="line">    [<span class="type">parameter</span>(<span class="type">position</span> = <span class="number">0</span>, <span class="type">mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>]<span class="variable">$Path</span>, </span><br><span class="line">    [<span class="type">parameter</span>(<span class="type">position</span> = <span class="number">1</span>, <span class="type">mandatory</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>]<span class="variable">$Parent</span>, </span><br><span class="line">    [<span class="type">parameter</span>(<span class="type">ValueFromPipeline</span> = <span class="variable">$true</span>)][<span class="built_in">string</span>[]]<span class="variable">$List</span>,</span><br><span class="line">    [<span class="type">parameter</span>(<span class="type">position</span> = <span class="number">2</span>, <span class="type">mandatory</span> = <span class="variable">$false</span>)][<span class="type">Alias</span>(<span class="string">&quot;open&quot;</span>, <span class="string">&quot;run&quot;</span>)][<span class="type">switch</span>]<span class="variable">$openVM</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">begin</span> &#123;</span><br><span class="line">    <span class="built_in">write-host</span> <span class="string">&quot;Begin.&quot;</span></span><br><span class="line">    <span class="comment"># 如果指定父系磁碟不存在即離開</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span>(<span class="built_in">Test-Path</span> <span class="variable">$Parent</span>)) &#123;</span><br><span class="line">      <span class="built_in">write-host</span> <span class="string">&quot;The parent is not defined.&quot;</span></span><br><span class="line">      <span class="keyword">exit</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 如果指定目錄不存在，就建立目錄</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span>(<span class="built_in">Test-Path</span> <span class="variable">$Path</span>)) &#123;</span><br><span class="line">      <span class="built_in">Write-Host</span> <span class="string">&quot;Build <span class="variable">$</span>&#123;Path&#125;&quot;</span></span><br><span class="line">      [<span class="built_in">void</span>](mkdir <span class="variable">$Path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">write-host</span> <span class="string">&quot;<span class="variable">$</span>&#123;Path&#125; exists.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">process</span> &#123;</span><br><span class="line">    <span class="keyword">Foreach</span> (<span class="variable">$VMName</span> <span class="keyword">in</span> <span class="variable">$List</span>) &#123;</span><br><span class="line">      <span class="variable">$VHDPath</span> = <span class="string">&quot;<span class="variable">$</span>&#123;Path&#125;<span class="variable">$</span>&#123;VMName&#125;.vhdx&quot;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="operator">-not</span>(<span class="built_in">Test-Path</span> <span class="variable">$VHDPath</span>)) &#123;</span><br><span class="line">        <span class="comment"># 狀態表示</span></span><br><span class="line">        <span class="built_in">Write-Progress</span> <span class="literal">-Activity</span> <span class="string">&quot;Building VHD...&quot;</span> <span class="literal">-Status</span> <span class="string">&quot;Building <span class="variable">$</span>&#123;VMName&#125;...&quot;</span> <span class="literal">-PercentComplete</span> (((<span class="variable">$List</span>.indexof(<span class="variable">$VMName</span>) + <span class="number">1</span>) / <span class="variable">$List</span>.count) * <span class="number">100</span>)</span><br><span class="line">        <span class="comment"># 建立差異硬碟</span></span><br><span class="line">        [<span class="built_in">void</span>](<span class="built_in">new-vhd</span> <span class="literal">-path</span> <span class="variable">$VHDPath</span> <span class="literal">-ParentPath</span> <span class="variable">$Parent</span> <span class="literal">-diff</span>)</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;<span class="variable">$</span>&#123;VHDPath&#125; is finished.&quot;</span></span><br><span class="line">        <span class="comment"># 設定同名的硬碟到同名的主機</span></span><br><span class="line">        <span class="built_in">Set-VMHardDiskDrive</span> <span class="literal">-VMName</span> <span class="variable">$VMName</span> <span class="literal">-path</span> <span class="variable">$VHDPath</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;<span class="variable">$</span>&#123;VMName&#125; exists.&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># 順便開啟VM</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$openVM</span>) &#123;</span><br><span class="line">        <span class="keyword">Foreach</span> (<span class="variable">$VMName</span> <span class="keyword">in</span> <span class="variable">$List</span>) &#123;</span><br><span class="line">          <span class="built_in">start-vm</span> <span class="literal">-name</span> <span class="variable">$VMName</span></span><br><span class="line">          <span class="built_in">write-host</span> <span class="string">&quot;Running <span class="variable">$</span>&#123;VMName&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">end</span> &#123;</span><br><span class="line">    <span class="built_in">write-host</span> <span class="string">&quot;End.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h1><h2 id="要先建好機器"><a href="#要先建好機器" class="headerlink" title="要先建好機器"></a>要先建好機器</h2><p>此指令要先建立好機器才能使用 <img src="https://i.imgur.com/TKKynjB.png" alt="file"></p><h2 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h2><p><code>build-VHD -Path &#39;E:labtest&#39; -Parent &#39;E:VMWinServer2019base.vhdx&#39; -List &quot;AD&quot;,&quot;Server1&quot;,&quot;Server2&quot;,&quot;Server3&quot;</code></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><code>build-VHD -Path &lt;你要建立的位置&gt; -Parent &lt;父系磁碟位置&gt; -List &lt;主機列表&gt;</code></p><h2 id="設定開啟pwsh載入函數"><a href="#設定開啟pwsh載入函數" class="headerlink" title="設定開啟pwsh載入函數"></a>設定開啟pwsh載入函數</h2><p>只需要使用notepad把上面的函數加進去後存成一個ps1檔案，開啟powershell輸入$profile，在裏頭加入<code>Import-module &lt;這個ps1檔案&gt;</code>，就可以在每次開啟的時候載入這個function。</p><p>註:<code>$profile</code> Powershell會在執行服務時，執行這檔案裡面的動作。</p><h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p><img src="https://i.imgur.com/5DmzeDx.png" alt="file"></p><h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>其實這麼簡單的東西，對於任何會寫Hello world的人而言，大概都是塊蛋糕，不過之前完全不會powershell時，用「快速建立差異硬碟」等等關鍵字丟google，其實也找不到什麼相關的文章，所以想說來寫一篇騙騙流量XD。</p><p>之後有時間的話，再來研究一下如何把這個指令包成一個function，使用單行指令和arguments來執行這個動作，到時候再更新回來。</p><p><code>22/8/1</code> 已經更新ㄌ</p>]]></content>
      
      
      <categories>
          
          <category> Powershell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Powershell </tag>
            
            <tag> 小工具 </tag>
            
            <tag> 懶人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50x W2作業</title>
      <link href="/cs50x-w2-note-2022/"/>
      <url>/cs50x-w2-note-2022/</url>
      
        <content type="html"><![CDATA[<p>這篇紀錄一下Ｗ2的作業思路。</p><span id="more"></span><h1 id="W2-筆記"><a href="#W2-筆記" class="headerlink" title="W2 筆記"></a>W2 筆記</h1><p><a href="https://cs50.harvard.edu/x/2022/notes/2/">官方的筆記傳送門</a></p><hr><h1 id="W2-大綱"><a href="#W2-大綱" class="headerlink" title="W2 大綱"></a>W2 大綱</h1><ul><li>Compiling -&gt; 講解程式碼是如何被電腦編譯機器語言的</li><li>Dubug -&gt; 教你使用VSCODE的Debug工具</li><li>Memory&#x2F;Data type -&gt; C語言如何存資料<ul><li>為何要分這麼多種?<ul><li>因為以前的記憶體成本很高，為了有效率的分配資源，所以C語言的資料類別設計十分嚴謹，為的就是能用最少記憶體存取最多的資料。</li></ul></li></ul></li><li>arrays -&gt; 可以用一個參數儲存多筆資料</li><li>字元Characters與字串String -&gt; 講解C語言如何存取一串字</li><li>Command-line arguments -&gt; 如何在CLI用指令+參數去run你的程式碼</li></ul><hr><p><img src="https://i.imgur.com/tZ7jmSt.png" alt="file"></p><h1 id="作業-pset2"><a href="#作業-pset2" class="headerlink" title="作業 : pset2"></a>作業 : pset2</h1><p>建議自己寫完後再看以下內容</p><p>參考答案連結 : <a href="https://github.com/huawiz/CS-note/tree/master/CS50x/pset2">Link</a></p><p>這禮拜的作業，大致上在練習使用command-line arguments以及陣列的使用。第一題(readability)還蠻簡單的，只要照著作業指示就能輕鬆完成。第二題(Caesar)很有趣，用到了<a href="https://www.asciitable.com/" title="ASCII">ASCII表</a>，抓到作業指示的公式與思考大寫與小寫的判別之後，就能Rotate的函數並且完成這題。而第三題(Substitution)則是這題的衍伸題，不是字元號碼的轉換，而是要請使用者自行輸入加密字元，為了能和<a href="https://sandbox.cs50.io/e6e69576-1719-4c83-a292-24d54690a699">課程範例</a>相同，要寫很多的條件句，如果沒想清楚的話就會花很久的時間。</p><h3 id="caesar與rotate分開寫"><a href="#caesar與rotate分開寫" class="headerlink" title="caesar與rotate分開寫"></a>caesar與rotate分開寫</h3><p>我的做法是按照作業指示，把加密與rotate函數分開寫，後來也成功用幾乎完全一致的函數完成了第二和三題，差別只在第二題有使用<a href="https://manual.cs50.io/3/atoi"><code>atoi()</code></a>來把字串轉成數字。為什麼是字串呢？因為command-line arguments是把值存成字串形式，所以還需要再使用這個函數，才能把string轉換成int。</p><hr><h3 id="caesar函數"><a href="#caesar函數" class="headerlink" title="caesar函數"></a>caesar函數</h3><p>簡單來說就是把每個輸入進來的字元用迴圈跑過，並且用自己寫的rotate函數，把它轉換成加密後的密碼，最後再printf到CLI上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">caesar</span><span class="params">(string key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string text = <span class="built_in">get_string</span>(<span class="string">&quot;plaintext: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(text); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        text[i] = <span class="built_in">rotate</span>(text[i], key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ciphertext: %s\n&quot;</span>, text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="rotate函數"><a href="#rotate函數" class="headerlink" title="rotate函數"></a>rotate函數</h3><p>caesar 與 substitution 的差異，只在於加密的key不同，所以一個是字串，一個是int。其他判斷大小寫、回傳非字母字元的條件句一模一樣。</p><p>caesar：考慮到加超過Z的狀況，因此原本想要用條件硬幹的我打消了念頭，轉而專注回題目的意思，最後得到一個漂亮的回傳式。大致上的做法是：先幫A-Z標號，先找到字母的號碼，然後往後數數字，走到尾巴再從字母A的號碼開始走，直到走完指定數字，即是加密後的字母。 <img src="https://i.imgur.com/GFyRE8m.png" alt="file"></p><p>例如A開始往後數到G，那就是移動了6、32或是58步。 <img src="https://i.imgur.com/WlWeFqv.png" alt="file"></p><p>substitution：這個比Caesar簡單，就是直接把A-Z與你的加密字母做1-1對應，因此只要直接回傳加密字母串的位置就行了，位置號碼就是A-Z的標號。</p><p><img src="https://i.imgur.com/PiVRuZO.png" alt="file"></p><p>65-90是大寫字母的ASCII號碼，所以要減掉A的字碼，這樣就能對到0-25(26個字母)，如此一來就能拿來對應加密字串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">rotate</span><span class="params">(<span class="type">char</span> letter, string key)</span> <span class="comment">// caesar是int key</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isupper</span>(letter))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//return (((int)letter - 64) + key) % 26 + 64; caesar的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">toupper</span>(key[((<span class="type">int</span>)letter) - <span class="number">65</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(letter))</span><br><span class="line">    &#123;</span><br><span class="line">    －<span class="comment">//return (((int)letter - 97) + key) % 26 + 97; caesar的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">tolower</span>(key[((<span class="type">int</span>)letter) - <span class="number">97</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> letter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他收穫"><a href="#其他收穫" class="headerlink" title="其他收穫"></a>其他收穫</h2><p>在寫作業的時候試字串，一直不知道為啥輸入’!’後的指令會被截斷。 <img src="https://i.imgur.com/oCqOQRT.png"></p><p>後來去CS50x群組問，得到了解答：bash會被!打斷</p><p><img src="https://i.imgur.com/CS57kYm.png"></p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>這週寫得比上週輕鬆，不過也是因為以前學過，之後Sort的部分對我來說則是完全新的東西，希望能好好學習，繼續週更筆記。</p>]]></content>
      
      
      <categories>
          
          <category> 電腦科學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS50x W1 作業</title>
      <link href="/cs50x-w1-note-2022/"/>
      <url>/cs50x-w1-note-2022/</url>
      
        <content type="html"><![CDATA[<p>這篇想來趁作業寫完記憶猶新，來記錄一下寫作業的痛點。</p><span id="more"></span><h1 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h1><p>詳細筆記，我沒有寫，官方的筆記<a href="https://cs50.harvard.edu/x/2022/notes/1/" title="在這">在這</a></p><hr><h1 id="W1大綱"><a href="#W1大綱" class="headerlink" title="Ｗ1大綱"></a>Ｗ1大綱</h1><ul><li>基礎Command Line 使用</li><li>C語言基礎<ul><li>程式架構、基礎參數、條件、函數、迴圈</li></ul></li><li>overflow -&gt; 電腦資源有限，如果沒有好好處理資料，有可能造成災難</li></ul><hr><h1 id="cs50x-環境設定問題"><a href="#cs50x-環境設定問題" class="headerlink" title="cs50x 環境設定問題"></a>cs50x 環境設定問題</h1><p>在剛開始寫作業的時候，照著指示把github連到cs50x的時候，發現我個人網頁連不上，如圖</p><p><img src="https://i.imgur.com/tDmvE2G.png" alt="file"></p><p>我翻了一堆文章和官方dc，最後是直接寄信去就被秒解了，如果你也有一樣的困擾，就別浪費時間了，直接寄信吧。</p><p><a href="mailto:&#115;&#x79;&#x73;&#x61;&#x64;&#109;&#105;&#x6e;&#x73;&#64;&#x63;&#115;&#x35;&#x30;&#x2e;&#104;&#97;&#114;&#x76;&#97;&#x72;&#x64;&#x2e;&#101;&#x64;&#x75;">&#115;&#x79;&#x73;&#x61;&#x64;&#109;&#105;&#x6e;&#x73;&#64;&#x63;&#115;&#x35;&#x30;&#x2e;&#104;&#97;&#114;&#x76;&#97;&#x72;&#x64;&#x2e;&#101;&#x64;&#x75;</a></p><p>（哈佛的處理效率超快，我搞這個環境就搞了一個晚上…）</p><hr><h1 id="pset1-Credit-個人詳解"><a href="#pset1-Credit-個人詳解" class="headerlink" title="pset1 : Credit 個人詳解"></a>pset1 : Credit 個人詳解</h1><p>其他題目寫得很順利，就這題開始有點卡，所以來特別詳解一下這題，但因為不想讓程式碼片段搞得文章很雜亂，所以完整程式碼連結放這，我只針對Concept與痛點做說明。</p><p><a href="https://github.com/huawiz/CS-note/blob/master/CS50x/pset1/credit/credit.c" title="程式碼傳送門">程式碼傳送門</a> 建議自行寫完再參考以下暴雷內容</p><h2 id="題目說了啥？"><a href="#題目說了啥？" class="headerlink" title="題目說了啥？"></a>題目說了啥？</h2><p><a href="https://cs50.harvard.edu/x/2022/psets/1/credit/" title="題目傳送門">題目傳送門</a></p><p>這題在說信用卡卡號有很多種，根據不同公司有不同的信用卡卡號的產生邏輯，但是這些不同的卡號間，有一演算法可以確認卡號是否有效。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%A2%E6%81%A9%E7%AE%97%E6%B3%95" title="Luhn’s Algorithm">Luhn’s Algorithm</a>，邏輯如下：</p><ol><li>從個位數開始，由右而左，把偶位數數字乘上2後，再把數字加起來。如果乘上2後超過10，就把十位數和個位數分開加總。</li><li>再把這個數字與其他信用卡奇數位的數字加總。</li><li>最後再把這個加總數，對10取模數，最後判斷</li></ol><p>舉例來說:假設號碼是12345678</p><ol><li>取偶數位數得到10305070，乘上2後得到20610140，再把各個位數取和得到2+6+1+1+4&#x3D;14</li><li>再把14與奇數位的數字相加，得到14+2+4+6+8&#x3D;34</li><li><code>34\equiv4\mod 10</code>，也就是34餘10得到4，非0所以12345678不符合規則</li></ol><h2 id="程式骨幹"><a href="#程式骨幹" class="headerlink" title="程式骨幹"></a>程式骨幹</h2><p><img src="https://i.imgur.com/l1Ke0Zu.png" alt="file"></p><h2 id="辨別ID是否有效"><a href="#辨別ID是否有效" class="headerlink" title="辨別ID是否有效"></a>辨別ID是否有效</h2><p>這裡是我覺得最難寫，也最值得做筆記的地方。</p><h3 id="如何針對奇位數與偶位數做動作呢？"><a href="#如何針對奇位數與偶位數做動作呢？" class="headerlink" title="如何針對奇位數與偶位數做動作呢？"></a>如何針對奇位數與偶位數做動作呢？</h3><p>我在寫這題的時候，卡在這問題卡了很久。我一直在想如何把ID的奇位數與偶位數分離。</p><p><img src="https://i.imgur.com/6WqOZ3w.png" alt="file"></p><p>為什麼要這樣分離？因為我注意到上面那個演算法的第二步，<strong>如果</strong>乘上2後加總大於10，則要在把個位數與十位數加起來。所以我想說分離後，只要把每個數都加起來就好了。</p><p>這個概念很直覺，也是因為Python可以針對String直接剪剪貼貼，但是我試了很久才發現，<strong>C語言不能這麼做</strong>。</p><p>不能 <code>str num1 = 11;str num2 = 22;</code>，然後<code>num1+num2 = 1122</code>這樣。</p><p>參考影片：</p><p>理解到這個限制之後，我對於如何做就換到了正確的方向：<strong>設一個參數紀錄奇位數和偶位數</strong>。當我找到這個方法後，這個程式就變得十分好寫，硬要用圖表示會很複雜，但是原理其實相當簡單。</p><p>(也是因為不太會用字元陣列…查到用法也<a href="http://tw.gitbook.net/c_standard_library/c_function_strncat.html" title="要引用string.h">要引用string.h</a>，還不卻定能用…)</p><p><img src="https://i.imgur.com/UnsMfL4.png" alt="file"></p><p>用一句話一張圖來說：對每個位置用0101做標記。</p><p><img src="https://i.imgur.com/cCgpE5E.png" alt="file"></p><p>然後再把要做的事情，在迴圈裡面寫if-else就能達到題目要求了～</p><h2 id="辨別卡種"><a href="#辨別卡種" class="headerlink" title="辨別卡種"></a>辨別卡種</h2><p>確定卡的ID有效之後，接下來就是要確認信用卡的卡種。在if-else這邊我想不用特別多做說明，但是<code>1e13</code>的用法我是在書上看到的，有了這個用法基本上就不用特別引入<code>math.h</code>來使用<code>pow()</code>函數。</p><p>用法: <code>1e13</code> 是指科學記號 <code>1\times 10 ^ &#123;13&#125;</code>，資料type為<code>float</code>，所以要轉成辨別開頭號碼的數字使用時，要把它轉成<code>long</code>，例如<code>(long)1e13</code>。</p><hr><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>寫到這裡也差不多了，上次認真學C語言是高中的事情，現在重新拾起有不同的樂趣…</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>我有搞一個dc群來學習cs50x，有興趣的朋友可以進來看看。</p><p><a href="https://discord.gg/4vfDf5aXC6">https://discord.gg/4vfDf5aXC6</a></p>]]></content>
      
      
      <categories>
          
          <category> 電腦科學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS50x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考證照的HelloWorld:AI900心得</title>
      <link href="/Diary/ai900/"/>
      <url>/Diary/ai900/</url>
      
        <content type="html"><![CDATA[<p>上班有點閒（？ 來用這篇整理一下考這張證照的日記，來幫助也想考這張證照的人</p><span id="more"></span><h2 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h2><p>最近開始了工作生涯，而公司的服務大多與微軟相關，剛入職時聽到一堆有關於微軟的名詞感到心生恐懼，因此才計畫要來考幾張微軟證照。</p><h2 id="準備時間與教材"><a href="#準備時間與教材" class="headerlink" title="準備時間與教材"></a>準備時間與教材</h2><p>約3天</p><ul><li>1天看<a href="https://docs.microsoft.com/zh-tw/learn/certifications/exams/ai-900" title="微軟的網頁教材">微軟的網頁教材</a></li><li>1天看<a href="https://www.udemy.com/course/ai900-azure/" title="Udemy的課程">Udemy的課程</a></li><li>1天和考試前看<a href="https://www.examtopics.com/exams/microsoft/ai-900/" title="考古題">考古題</a></li></ul><p>我準備的時間很短，所以分數也是普普，8xx&#x2F;1000</p><h2 id="如何獲取免費考試資格"><a href="#如何獲取免費考試資格" class="headerlink" title="如何獲取免費考試資格?"></a>如何獲取免費考試資格?</h2><p>這篇文章寫得非常詳細，推薦~ <a href="https://vocus.cc/article/60160d39fd8978000132e3e5" title="如何免費拿張微軟雲端證照">如何免費拿張微軟雲端證照</a> 基本上有兩個管道，差別只在時差，我當初AI900是在Training Day拿的，當天半夜開啟官方的課程後就跑去睡覺了xd</p><ul><li><a href="https://www.microsoft.com/taiwan/citizenship/microsoft-skilling.aspx/?wt.mc_id=AID3017211#course" title="台灣微軟企業公民">台灣微軟企業公民</a></li><li><a href="https://www.microsoft.com/en-us/trainingdays" title="Microsoft Azure Virtual Training Day">Microsoft Azure Virtual Training Day</a></li></ul><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ul><li>一定要寫考古題，尤其是考試前兩天</li><li>在準備的時候，如果覺得服務內容很亂很雜，建議用紙筆或是Coggle把甚麼功能對應甚麼名詞，用心智圖整理一下</li><li>要準備護照，報名時的英文姓名要與護照相同</li></ul><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>這是我人生第一次考證照（如果小時候珠算不算的話），我覺得微軟的考照環境作得還不錯，準備和考試過程都很舒服。 我覺得AI900應該算是推廣大於專業用途的一張初階證照，實際用途不大，不過對於認識人工智慧有不錯的幫助。就像我同事說的：「考身體健康的！」，也謝謝他的爬蟲幫我抓考古題xD</p>]]></content>
      
      
      <categories>
          
          <category> 自療 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微軟 </tag>
            
            <tag> 證照 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雙十連假來用Python畫個國旗吧</title>
      <link href="/10-10-python-draw-flag/"/>
      <url>/10-10-python-draw-flag/</url>
      
        <content type="html"><![CDATA[<p>連假前上電腦課，老師出了一份作業要我們使用tkinter視窗的canvas來畫一張圖，並且要以雙十國慶為主題作為回家作業，於是我研究了下網路上的國旗畫法，以及numpy的array的用法，畫了一張國旗。先不討論到底是國旗還黨旗，反正這篇就只是分享一下如何畫國旗。</p><span id="more"></span><h1 id="效果圖"><a href="#效果圖" class="headerlink" title="效果圖"></a>效果圖</h1><p><img src="https://i.imgur.com/Kmg9V76.png" alt="file"></p><h1 id="簡單說明"><a href="#簡單說明" class="headerlink" title="簡單說明"></a>簡單說明</h1><p>只要更改初始設定unit的值，就可以按照比例改變國旗的大小。</p><h1 id="困難的地方"><a href="#困難的地方" class="headerlink" title="困難的地方"></a>困難的地方</h1><ol><li>不熟悉numpy函數用法，邊做邊惡補</li><li>圖型對應畫布座標的轉換，需要一些數學運算</li><li>幾何圖形要用可行（自己會做）的做，要想怎麼拼接成自己要的圖案</li></ol><hr><h1 id="簡單說明-1"><a href="#簡單說明-1" class="headerlink" title="簡單說明"></a>簡單說明</h1><p>畫面藍紅區塊1:4，整體大小3:2。</p><h2 id="十二光芒"><a href="#十二光芒" class="headerlink" title="十二光芒"></a>十二光芒</h2><p><a href="https://www.globalflag.idv.tw/wg/hzgq.htm" title="參考連結">參考連結</a> <img src="https://i.imgur.com/rwYnFBg.png" alt="file"> 這邊是我覺得比較難的部分，因為想要在tkinter上畫多點的幾何圖形，需要給每個點的座標，然而這種按照特定比例繪製的圖形，要怎麼畫圖呢？我一開始是想要直接連結子、未、巳三點，並且與內圈做一個導航形狀的圖型，這樣只需要旋轉4次，就能完成了，但是困難的點是我的數學太爛，我不知道怎麼算裡面凹進去那點的座標。</p><h3 id="建立函數"><a href="#建立函數" class="headerlink" title="建立函數"></a>建立函數</h3><p><img src="https://i.imgur.com/ykOiCAX.png" alt="file"></p><p>我研究了一陣子後換了作法，改成畫內圈兩端與外圈頂點的圖型，因為我注意到內圈的直徑等於未巳相連的一半，也剛好等於藍色區塊寬的1&#x2F;4，這樣只需要轉<code>30\degree</code>共12次，就可以轉完圖形。於是我先寫了這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag.create_polygon(x_0, y_0-<span class="number">75</span>, x_0-<span class="number">18.75</span>, y_0, x_0+<span class="number">18.75</span>, y_0, fill=<span class="string">&quot;white&quot;</span>)</span><br></pre></td></tr></table></figure><p>但現在頭大的是，我要怎麼求其他點的具體座標？我想到的是使用旋轉矩陣，但是要怎麼做呢？其實就是按照定義刻出來，然後我另外寫了一個函數來找旋轉<code>\frac&#123;\pi&#125;&#123;6&#125;</code>共12次的點。抓到點後，再對每一項進行座標平移就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- 工具</span></span><br><span class="line"><span class="comment"># 取得12點座標</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_point</span>(<span class="params">x, y</span>):</span><br><span class="line">    point_list = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        point_list.append(coodinate_tp(x, y, (np.pi/<span class="number">6</span>)*i))</span><br><span class="line">    <span class="keyword">return</span> point_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coodinate_tp</span>(<span class="params">x=<span class="number">1</span>, y=<span class="number">0</span>, theta=np.pi/<span class="number">6</span></span>):</span><br><span class="line">    new_x = <span class="built_in">round</span>(x*np.cos(theta) - y*np.sin(theta), <span class="number">2</span>)</span><br><span class="line">    new_y = <span class="built_in">round</span>(x*np.sin(theta) + y*np.cos(theta), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> [new_x, new_y]</span><br></pre></td></tr></table></figure><p>輸出效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;get_point(0,-(w/8))</span><br><span class="line">---</span><br><span class="line">[[0.0, -75.0],</span><br><span class="line"> [37.5, -64.95],</span><br><span class="line"> [64.95, -37.5],</span><br><span class="line"> [75.0, -0.0],</span><br><span class="line"> [64.95, 37.5],</span><br><span class="line"> [37.5, 64.95],</span><br><span class="line"> [0.0, 75.0],</span><br><span class="line"> [-37.5, 64.95],</span><br><span class="line"> [-64.95, 37.5],</span><br><span class="line"> [-75.0, 0.0],</span><br><span class="line"> [-64.95, -37.5],</span><br><span class="line"> [-37.5, -64.95]]</span><br></pre></td></tr></table></figure><hr><h3 id="用自製函數和迴圈窮舉，並且用numpy-array做運算"><a href="#用自製函數和迴圈窮舉，並且用numpy-array做運算" class="headerlink" title="用自製函數和迴圈窮舉，並且用numpy array做運算"></a>用自製函數和迴圈窮舉，並且用numpy array做運算</h3><p>接下來我只需要抓到三個點，並且一起繞著圓心轉12次，就可以了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 畫12個三角型</span></span><br><span class="line">a_point = np.array(get_point(<span class="number">0</span>, -<span class="number">1</span>*(w/<span class="number">8</span>)))</span><br><span class="line">b_point = np.array(get_point(-<span class="number">1</span>*(w/<span class="number">32</span>), <span class="number">0</span>))</span><br><span class="line">c_point = np.array(get_point(w/<span class="number">32</span>, <span class="number">0</span>))</span><br><span class="line">arr = np.append(a_point, b_point, axis=<span class="number">1</span>)</span><br><span class="line">arr2 = np.append(arr, c_point, axis=<span class="number">1</span>)</span><br><span class="line">arr2[:, <span class="number">0</span>::<span class="number">2</span>] = arr2[:, <span class="number">0</span>::<span class="number">2</span>]+x_0</span><br><span class="line">arr2[:, <span class="number">1</span>::<span class="number">2</span>] = arr2[:, <span class="number">1</span>::<span class="number">2</span>]+y_0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr2)):</span><br><span class="line">    flag.create_polygon(arr2[i].tolist(), fill=<span class="string">&quot;white&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中比較囉唆的部分，大概就是np.append必須分開加，如果點一多，可能還是要寫個迴圈來處理。因為是要描點，所以這個list的結構大概是兩個為單位，奇數項(1,3,5…)都是代表縱軸，偶數則代表橫軸。所以需要用到slice來處理陣列，這樣才能讓加入對的原點。原點指的是藍色部分的圓心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr2[:,0::2] = arr2[:,0::2]+x_0</span><br><span class="line">arr2[:,1::2] = arr2[:,1::2]+y_0</span><br><span class="line">arr2</span><br><span class="line">---</span><br><span class="line">array([[150.  ,  25.  , 131.25, 100.  , 168.75, 100.  ],</span><br><span class="line">       [187.5 ,  35.05, 133.76,  90.63, 166.24, 109.37],</span><br><span class="line">       [214.95,  62.5 , 140.62,  83.76, 159.38, 116.24],</span><br><span class="line">       [225.  , 100.  , 150.  ,  81.25, 150.  , 118.75],</span><br><span class="line">       [214.95, 137.5 , 159.37,  83.76, 140.63, 116.24],</span><br><span class="line">       [187.5 , 164.95, 166.24,  90.62, 133.76, 109.38],</span><br><span class="line">       [150.  , 175.  , 168.75, 100.  , 131.25, 100.  ],</span><br><span class="line">       [112.5 , 164.95, 166.24, 109.37, 133.76,  90.63],</span><br><span class="line">       [ 85.05, 137.5 , 159.38, 116.24, 140.62,  83.76],</span><br><span class="line">       [ 75.  , 100.  , 150.  , 118.75, 150.  ,  81.25],</span><br><span class="line">       [ 85.05,  62.5 , 140.63, 116.24, 159.37,  83.76],</span><br><span class="line">       [112.5 ,  35.05, 133.76, 109.38, 166.24,  90.62]])</span><br></pre></td></tr></table></figure><p>然後，因為Canvas的create_polygon函數，認得是list，所以還是要把資料從array轉換回list。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr2.tolist()</span><br><span class="line">---</span><br><span class="line">[[150.0, 25.0, 131.25, 100.0, 168.75, 100.0],</span><br><span class="line"> [187.5, 35.05, 133.76, 90.63, 166.24, 109.37],</span><br><span class="line"> [214.95, 62.5, 140.62, 83.76, 159.38, 116.24],</span><br><span class="line"> [225.0, 100.0, 150.0, 81.25, 150.0, 118.75],</span><br><span class="line"> [214.95, 137.5, 159.37, 83.76, 140.63, 116.24],</span><br><span class="line"> [187.5, 164.95, 166.24, 90.62, 133.76, 109.38],</span><br><span class="line"> [150.0, 175.0, 168.75, 100.0, 131.25, 100.0],</span><br><span class="line"> [112.5, 164.95, 166.24, 109.37, 133.76, 90.63],</span><br><span class="line"> [85.05, 137.5, 159.38, 116.24, 140.62, 83.76],</span><br><span class="line"> [75.0, 100.0, 150.0, 118.75, 150.0, 81.25],</span><br><span class="line"> [85.05, 62.5, 140.63, 116.24, 159.37, 83.76],</span><br><span class="line"> [112.5, 35.05, 133.76, 109.38, 166.24, 90.62]]</span><br></pre></td></tr></table></figure><p>大概寫到這裡，後面剩下的步驟就只是畫兩個圓，其實像是有些設定的變數有點多餘，例如我一開始設定的值radius完全沒用到，若把w&#x2F;8換成radius，應該可以讓程式碼更好讀，吧？</p><hr><h1 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始設定</span></span><br><span class="line">unit = <span class="number">20</span></span><br><span class="line">w, h = <span class="number">30</span>*unit, <span class="number">20</span>*unit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義重要位置</span></span><br><span class="line">x_0, y_0 = w/<span class="number">4</span>, h/<span class="number">4</span>  <span class="comment"># 藍色區塊中心點</span></span><br><span class="line">radius = w/<span class="number">8</span>  <span class="comment"># 半徑：外圈(w/2)*(1/8)* 6 - (w/2)*(1/8)*2 ，再除二， 剛好是w的1/8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 函數</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- 工具</span></span><br><span class="line"><span class="comment"># 取得12點座標</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_point</span>(<span class="params">x, y</span>):</span><br><span class="line">    point_list = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        point_list.append(coodinate_tp(x, y, (np.pi/<span class="number">6</span>)*i))</span><br><span class="line">    <span class="keyword">return</span> point_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coodinate_tp</span>(<span class="params">x=<span class="number">1</span>, y=<span class="number">0</span>, theta=np.pi/<span class="number">6</span></span>):</span><br><span class="line">    new_x = <span class="built_in">round</span>(x*np.cos(theta) - y*np.sin(theta), <span class="number">2</span>)</span><br><span class="line">    new_y = <span class="built_in">round</span>(x*np.sin(theta) + y*np.cos(theta), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> [new_x, new_y]</span><br><span class="line"></span><br><span class="line"><span class="comment"># build tkinter</span></span><br><span class="line">double_ten = Tk()</span><br><span class="line">double_ten.title(<span class="string">&#x27;中華民國國旗&#x27;</span>)</span><br><span class="line">flag = Canvas(double_ten, width=w, height=h, bg=<span class="string">&#x27;#FE0000&#x27;</span>)  <span class="comment"># 比例3:2</span></span><br><span class="line">flag.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 藍天十二光芒</span></span><br><span class="line">flag.create_rectangle(<span class="number">0</span>, <span class="number">0</span>, w/<span class="number">2</span>, h/<span class="number">2</span>, fill=<span class="string">&quot;#000095&quot;</span>)  <span class="comment"># 藍色底佔國旗的1/4</span></span><br><span class="line"><span class="comment"># 畫12個三角型</span></span><br><span class="line">a_point = np.array(get_point(<span class="number">0</span>, -<span class="number">1</span>*(w/<span class="number">8</span>)))</span><br><span class="line">b_point = np.array(get_point(-<span class="number">1</span>*(w/<span class="number">32</span>), <span class="number">0</span>))</span><br><span class="line">c_point = np.array(get_point(w/<span class="number">32</span>, <span class="number">0</span>))</span><br><span class="line">arr = np.append(a_point, b_point, axis=<span class="number">1</span>)</span><br><span class="line">arr2 = np.append(arr, c_point, axis=<span class="number">1</span>)</span><br><span class="line">arr2[:, <span class="number">0</span>::<span class="number">2</span>] = arr2[:, <span class="number">0</span>::<span class="number">2</span>]+x_0</span><br><span class="line">arr2[:, <span class="number">1</span>::<span class="number">2</span>] = arr2[:, <span class="number">1</span>::<span class="number">2</span>]+y_0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr2)):</span><br><span class="line">    flag.create_polygon(arr2[i].tolist(), fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 內部小圈圈</span></span><br><span class="line">flag.create_oval((w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>)*<span class="number">3</span>, (h/<span class="number">4</span>)-((w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>)), (w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>)</span><br><span class="line">                 * <span class="number">5</span>, (h/<span class="number">4</span>)+((w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>)), fill=<span class="string">&quot;#000095&quot;</span>, outline=<span class="string">&quot;#000095&quot;</span>)</span><br><span class="line">flag.create_oval((w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>)*<span class="number">3</span>+w/<span class="number">120</span>, (h/<span class="number">4</span>)-((w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>))+w/<span class="number">120</span>, (w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>)</span><br><span class="line">                 * <span class="number">5</span>-w/<span class="number">120</span>, (h/<span class="number">4</span>)+((w/<span class="number">2</span>)*(<span class="number">1</span>/<span class="number">8</span>))-w/<span class="number">120</span>, fill=<span class="string">&quot;#fff&quot;</span>, outline=<span class="string">&quot;#fff&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag.create_oval((w/2)*(1/8)*2, (h/4)-((w/2)*(2/8)), (w/2)*(1/8)</span></span><br><span class="line"><span class="comment">#                 * 6, (h/4)+((w/2)*(2/8)), outline=&#x27;white&#x27;)  # 外圈（確認三角位置用）</span></span><br><span class="line"></span><br><span class="line">double_ten.mainloop()</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><a href="https://numpy.org/doc/stable/reference/generated/numpy.array.html" title="numpy.array _ numpy doc">numpy.array _ numpy doc</a></li><li><a href="http://hk.uwenku.com/question/p-xlgtnygg-tk.html">Python - Numpy：我怎樣才能同時選擇一個數組的所有奇數行和所有偶數列</a></li><li>上課範例</li></ul><h2 id="旋轉矩陣"><a href="#旋轉矩陣" class="headerlink" title="旋轉矩陣"></a>旋轉矩陣</h2><ul><li><a href="https://silverwind1982.pixnet.net/blog/post/165223625http://" title="旋轉矩陣">旋轉矩陣 - 拾人牙慧</a></li></ul><h2 id="國旗規格"><a href="#國旗規格" class="headerlink" title="國旗規格"></a>國旗規格</h2><ul><li><a href="https://www.globalflag.idv.tw/wg/hzgq.htm" title="中華民國國旗繪製 - 旗海圖幟">中華民國國旗繪製 - 旗海圖幟</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E5%9C%8B%E6%97%97" title="中華民國國旗">中華民國國旗</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作業 </tag>
            
            <tag> 國旗 </tag>
            
            <tag> 程式 </tag>
            
            <tag> 雙十 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>肥宅戴Apple Watch Series 6 半年的使用心得</title>
      <link href="/Diary/aw-half-year/"/>
      <url>/Diary/aw-half-year/</url>
      
        <content type="html"><![CDATA[<p>剛剛騎腳踏車的時候想到自己戴著Apple Watch也大概半年了，所以想說來寫點心得好了～</p><span id="more"></span><h2 id="購買過程"><a href="#購買過程" class="headerlink" title="購買過程"></a>購買過程</h2><p>年初的時候，對於AW的性衝動壓抑不住了，所以就在某天跑外送跑到一半的時候殺去101直營店買了它。買的時候還在自己ig上自嘲自己是個盤子哈哈。 <img src="https://i.imgur.com/HMSx6iF.jpg" alt="file"></p><h2 id="講講佩戴歷程"><a href="#講講佩戴歷程" class="headerlink" title="講講佩戴歷程"></a>講講佩戴歷程</h2><p>從1月底購入開始，大概先維持了3個月的每日配戴週期。每天大概就是洗澡的時候拔下來充電，然後戴著睡覺、跑單、上課。但是5-7月因為疫情被關在家裡，覺得在家配操作電腦時戴手錶很麻煩，每天又要充電很累，所以這陣子的紀錄斷斷續續的，有時候可能整個禮拜有的紀錄不到2天。後來8月開始微解封，能去戶外騎腳踏車、去健身房後，才又恢復每天記錄的生活。</p><h2 id="講講優點"><a href="#講講優點" class="headerlink" title="講講優點"></a>講講優點</h2><p>用了半年，Apple Watch應該算是有為我的生活帶來些改變，例如：最近開始迷上騎腳踏車，以及之前沒有特定重量訓練頻率的我，會因為有它的提醒，而讓自己盡量能維持一週一練。所以說若是以健康為考量點來想，光是這樣就是非常優的投資，買對了。</p><h3 id="每日活動量目標與成就獎章"><a href="#每日活動量目標與成就獎章" class="headerlink" title="每日活動量目標與成就獎章"></a>每日活動量目標與成就獎章</h3><p><img src="https://i.imgur.com/QmALE9b.png" alt="file"> <img src="https://i.imgur.com/ZfTQtzR.png" alt="file"></p><p>蘋果內建的這玩意兒我覺得很有用，我自己並不是非常有紀律性，會要求自己一定要每天達成三個圈圈的人。但是光有時滑手機時，無意間會看到自己的活動紀錄，每次就會在內心提醒自己要運動這回事，就有發揮購入它的影響力了。</p><h3 id="睡眠追蹤-AutoSleep"><a href="#睡眠追蹤-AutoSleep" class="headerlink" title="睡眠追蹤-AutoSleep"></a>睡眠追蹤-AutoSleep</h3><p><img src="https://i.imgur.com/YeLgFRU.jpg" alt="file"> 這個App是我個人覺得這是買AW必備的App，和前面運動紀錄同理，它會紀錄你每晚的睡眠狀況。累積一定的數據量後，就會讓我反思自己的生活習慣的部分，更了解自己一點的睡眠狀況。</p><h3 id="手錶鬧鐘喚醒功能比想像中好"><a href="#手錶鬧鐘喚醒功能比想像中好" class="headerlink" title="手錶鬧鐘喚醒功能比想像中好"></a>手錶鬧鐘喚醒功能比想像中好</h3><p>原本剛買的時候，不覺得這東西會比手機大聲叫有用多少。但是我錯了，我原本是一定會睡到讓手機重複叫n次鬧鈴，才有辦法醒來的人，但是手錶鬧鐘常常讓我第一次就醒來，有點像是小時候去上學，媽媽會定時把你搖醒的感覺。</p><h3 id="延展手機的功能"><a href="#延展手機的功能" class="headerlink" title="延展手機的功能"></a>延展手機的功能</h3><p>我買的AW是不含sim卡的版本，但是因為在現代手機幾乎是不離身的情況下，手錶本身有沒有網路的問題其實不大。但是手錶很方便的點，在於接聽電話的時候可以直接用手錶代替手機收聽，手錶內建擴音通話功能，超級方便，有時候走在路上有電話，只要手抬起來就可以通話了，不用再從包包裡翻手機出來。</p><p>再來就是手錶的設定，基本上是同步手機的，只要手錶設定勿擾模式，手機就會一起設定勿擾，挺方便的。最後是呼叫手機的功能，有時候手機被我丟在房間某角落的時候，手錶可以直接呼叫手機，讓我可以透過聲音知道手機的位置，省去我找不到手機的困擾。</p><h3 id="電子支付"><a href="#電子支付" class="headerlink" title="電子支付"></a>電子支付</h3><p>這東西真的他媽的方便，去超商都只要逼一下就能買東西，完全不用帶鈔票和零錢。</p><h2 id="講講缺點"><a href="#講講缺點" class="headerlink" title="講講缺點"></a>講講缺點</h2><h3 id="電池容量仍然不夠"><a href="#電池容量仍然不夠" class="headerlink" title="電池容量仍然不夠"></a>電池容量仍然不夠</h3><p><img src="https://i.imgur.com/GCkbozm.png" alt="file"> AW普遍最被詬病的地方，就是它的續航力真的不怎麼樣，每日一充真的有點小麻煩。若是有某天因為長時間活動而使用像是Strava之類的軟體紀錄運動，可能會像我一樣記錄到一半要換成用手機的狀況。那天我是下午兩點騎車去環北北基，大概到晚上的時候就沒電了。雖然我其實不太記得當天出門的時候是不是充飽的，但是如果是照每日充手錶的習慣，那遇到這種特別的行程，可能就會突然中途掛點，一定得提早充電才行。</p><h3 id="無法用悠遊卡"><a href="#無法用悠遊卡" class="headerlink" title="無法用悠遊卡"></a>無法用悠遊卡</h3><p>這個不知道該怪誰，但是無法支持悠遊卡，就讓電子支付的體驗有點打折。雖然說已經有錶帶推出結合悠遊卡的功能，但是還是希望台灣能開放用AW直接綁悠遊卡。</p><h3 id="會被迫買更多蘋果的產品、周邊"><a href="#會被迫買更多蘋果的產品、周邊" class="headerlink" title="會被迫買更多蘋果的產品、周邊"></a>會被迫買更多蘋果的產品、周邊</h3><p>蘋果教名不虛傳，手機用了以後就會默默地把其他東西都換成蘋果或是買更多蘋果，而買了AW以後，我大概用不到一週又殺去買了這個三合一充電座，雖然用到現在都算滿意，但是這些都算是而外支出，若要考慮購買，一定要連這些都想到，不然荷包就會一直莫名挨揍。</p><p><img src="http://hey-series.com/wp-content/uploads/2021/09/IMG_0136-300x225.png"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這半年來，戴智慧手錶這回事帶來的影響比我原始想得大上許多，一開始買的動機只是覺得很潮、很屌。後來運動數據累積一段時間後，我真的覺得AW是個還不錯的紀錄工具，這些紀錄會時不時扮演著教練的角色督促自己運動。不管是早有訓練習慣的人或是想靠一支手錶帶來些改變的，有預算的話AW算是還不錯的投資。</p>]]></content>
      
      
      <categories>
          
          <category> 自療 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apple </tag>
            
            <tag> 使用心得 </tag>
            
            <tag> 手錶 </tag>
            
            <tag> 智慧生活 </tag>
            
            <tag> 穿戴裝置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在mac上建立一個捷徑執行終端機指令</title>
      <link href="/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E6%8D%B7%E5%BE%91%E5%9F%B7%E8%A1%8C%E7%B5%82%E7%AB%AF%E6%A9%9F%E6%8C%87%E4%BB%A4/"/>
      <url>/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E6%8D%B7%E5%BE%91%E5%9F%B7%E8%A1%8C%E7%B5%82%E7%AB%AF%E6%A9%9F%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>前陣子有在使用anki，為了建立單字庫而常使用記事本來紀錄單字。</p><p>但是一個一個字key很麻煩，於是寫了一個簡單的python來輸入單字。</p><span id="more"></span><p>但是又但是，每次要執行一樣的py檔案，都要打開termial，然後輸入python3 vocabulary.py來執行，實在是有點麻煩…</p><p>於是研究了一下，中途一直不知道要找什麼關鍵字，研究了一陣子才知道要用applescript來做這件事，為了避免忘記，特別寫這篇紀錄一下，如果能幫助到路人也是功德遠滿~</p><p>首先打開Automator，建立一個應用程式</p><p><img src="https://i.imgur.com/KsLX620.png" alt="file"></p><p>並且找到applescript</p><p><img src="https://i.imgur.com/3f2lWZT.png" alt="file"></p><p>接下來輸入指令</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">&quot;Terminal&quot;</span></span><br><span class="line">reopen</span><br><span class="line"><span class="built_in">activate</span></span><br><span class="line">do <span class="keyword">script</span> <span class="string">&quot;cd ~/desktop/vocabulary&quot;</span> <span class="keyword">in</span> window <span class="number">1</span></span><br><span class="line">do <span class="keyword">script</span> <span class="string">&quot;python3 vocabulary.py&quot;</span> <span class="keyword">in</span> window <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">tell</span></span><br></pre></td></tr></table></figure><p>最後儲存就能享受極度懶人的使用體驗</p><p>如此一來，就能直接在dock完成打開終端機+輸入指令的動作~</p><p><img src="https://i.imgur.com/8vEpOiC.png" alt="file"></p><p>指令詳細可以參考蘋果的<a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_cmds.html">guide</a></p><p>END</p><p>By <a href="https://medium.com/@huawiz">Huawiz</a> on <a href="https://medium.com/p/e5ded213a113">August 26, 2021</a>.</p><p><a href="https://medium.com/@huawiz/%E7%84%A1%E7%94%A8-%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E6%8D%B7%E5%BE%91%E5%9F%B7%E8%A1%8C%E7%B5%82%E7%AB%AF%E6%A9%9F%E6%8C%87%E4%BB%A4-e5ded213a113">Canonical link</a></p><p>Exported from <a href="https://medium.com/">Medium</a> on September 9, 2021.</p>]]></content>
      
      
      <categories>
          
          <category> 電腦使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> applescript </tag>
            
            <tag> automator </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
